/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    exams: Exam;
    exam_categories: ExamCategory;
    exam_infos: ExamInfo;
    exam_sub_infos: ExamSubInfo;
    download_folders: DownloadFolder;
    download_sub_folders: DownloadSubFolder;
    download_files: DownloadFile;
    courses: Course;
    Jeeblogs: Jeeblog;
    Neetblogs: Neetblog;
    schoolblogs: Schoolblog;
    satblogs: Satblog;
    idblogs: Idblog;
    apblogs: Apblog;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    exams: ExamsSelect<false> | ExamsSelect<true>;
    exam_categories: ExamCategoriesSelect<false> | ExamCategoriesSelect<true>;
    exam_infos: ExamInfosSelect<false> | ExamInfosSelect<true>;
    exam_sub_infos: ExamSubInfosSelect<false> | ExamSubInfosSelect<true>;
    download_folders: DownloadFoldersSelect<false> | DownloadFoldersSelect<true>;
    download_sub_folders: DownloadSubFoldersSelect<false> | DownloadSubFoldersSelect<true>;
    download_files: DownloadFilesSelect<false> | DownloadFilesSelect<true>;
    courses: CoursesSelect<false> | CoursesSelect<true>;
    Jeeblogs: JeeblogsSelect<false> | JeeblogsSelect<true>;
    Neetblogs: NeetblogsSelect<false> | NeetblogsSelect<true>;
    schoolblogs: SchoolblogsSelect<false> | SchoolblogsSelect<true>;
    satblogs: SatblogsSelect<false> | SatblogsSelect<true>;
    idblogs: IdblogsSelect<false> | IdblogsSelect<true>;
    apblogs: ApblogsSelect<false> | ApblogsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  role: 'admin' | 'user';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  caption?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exams".
 */
export interface Exam {
  id: string;
  /**
   * Original ID from the imported data
   */
  originalId?: number | null;
  /**
   * Name of the exam
   */
  examName: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exam_categories".
 */
export interface ExamCategory {
  id: string;
  /**
   * Original ID from the imported data
   */
  originalId?: number | null;
  /**
   * The exam this category belongs to
   */
  exam: string | Exam;
  /**
   * Name of the exam category
   */
  categoryName: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exam_infos".
 */
export interface ExamInfo {
  id: string;
  /**
   * Original ID from the imported data
   */
  originalId?: number | null;
  /**
   * The category this exam info belongs to
   */
  category: string | ExamCategory;
  /**
   * Name of the exam info menu item
   */
  menuName: string;
  /**
   * Description of the exam info
   */
  description?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  seo?: {
    /**
     * SEO title for the exam info
     */
    title?: string | null;
    /**
     * SEO description for the exam info
     */
    description?: string | null;
    /**
     * SEO keywords for the exam info
     */
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exam_sub_infos".
 */
export interface ExamSubInfo {
  id: string;
  /**
   * Original ID from the imported data
   */
  originalId?: number | null;
  /**
   * The exam info this sub info belongs to
   */
  examInfo: string | ExamInfo;
  /**
   * Name of the sub menu item
   */
  subMenuName: string;
  /**
   * Description of the sub info
   */
  description?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  seo?: {
    /**
     * SEO title for the sub info
     */
    title?: string | null;
    /**
     * SEO description for the sub info
     */
    description?: string | null;
    /**
     * SEO keywords for the sub info
     */
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "download_folders".
 */
export interface DownloadFolder {
  id: string;
  /**
   * Original ID from the imported data
   */
  originalId?: number | null;
  /**
   * The category this download folder belongs to
   */
  category: string | ExamCategory;
  /**
   * Name of the download folder
   */
  menuName: string;
  seo?: {
    /**
     * SEO title for the download folder
     */
    title?: string | null;
    /**
     * SEO description for the download folder
     */
    description?: string | null;
    /**
     * SEO keywords for the download folder
     */
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "download_sub_folders".
 */
export interface DownloadSubFolder {
  id: string;
  /**
   * Original ID from the imported data
   */
  originalId?: number | null;
  /**
   * The download folder this sub folder belongs to
   */
  downloadFolder: string | DownloadFolder;
  /**
   * Name of the sub folder
   */
  subMenuName: string;
  seo?: {
    /**
     * SEO title for the sub folder
     */
    title?: string | null;
    /**
     * SEO description for the sub folder
     */
    description?: string | null;
    /**
     * SEO keywords for the sub folder
     */
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "download_files".
 */
export interface DownloadFile {
  id: string;
  /**
   * Original ID from the imported data
   */
  originalId?: number | null;
  /**
   * The sub folder this file belongs to
   */
  downloadSubFolder: string | DownloadSubFolder;
  /**
   * Name of the file
   */
  fileName: string;
  /**
   * URL to download the file
   */
  fileUrl: string;
  /**
   * Type of the file
   */
  fileType?: ('pdf' | 'doc' | 'zip' | 'xls' | 'ppt' | 'other') | null;
  /**
   * Size of the file in bytes
   */
  fileSize?: number | null;
  /**
   * Number of times this file has been downloaded
   */
  downloadCount?: number | null;
  createdAt: string;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses".
 */
export interface Course {
  id: string;
  /**
   * Original ID from the imported data
   */
  originalId?: number | null;
  /**
   * The category this course belongs to
   */
  category: string | ExamCategory;
  /**
   * Name of the course
   */
  course_name: string;
  /**
   * Short description of the course
   */
  course_short_description?: string | null;
  /**
   * Detailed description of the course
   */
  description?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Price of the course
   */
  price?: number | null;
  /**
   * Course rating (0-5)
   */
  rating?: number | null;
  /**
   * Number of reviews for the course
   */
  review?: number | null;
  /**
   * Course start date
   */
  start_date?: string | null;
  /**
   * Course duration
   */
  duration?: string | null;
  /**
   * Number of students enrolled
   */
  student_count?: number | null;
  /**
   * Type of course delivery
   */
  course_type?: ('online' | 'offline' | 'hybrid') | null;
  /**
   * Difficulty level of the course
   */
  course_level?: ('1' | '2' | '3') | null;
  /**
   * Additional course details
   */
  other_details?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Name of the faculty/instructor
   */
  faculty_name?: string | null;
  /**
   * URL to faculty image
   */
  faculty_image?: string | null;
  /**
   * URL to course image
   */
  course_image?: string | null;
  /**
   * URL to course video
   */
  course_video?: string | null;
  /**
   * SEO title for the course
   */
  seo_title?: string | null;
  /**
   * SEO description for the course
   */
  seo_description?: string | null;
  /**
   * SEO keywords for the course
   */
  seo_keywords?: string | null;
  createdAt: string;
  updatedAt: string;
}
/**
 * Engineering and JEE entrance exam related blog posts
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Jeeblogs".
 */
export interface Jeeblog {
  id: string;
  /**
   * Original ID from the imported data
   */
  originalId?: number | null;
  /**
   * Blog title
   */
  title: string;
  /**
   * Blog content in Lexical format
   */
  description: string;
  /**
   * Original HTML content as backup (from SQL import)
   */
  descriptionHtml?: string | null;
  /**
   * Short description for blog previews
   */
  excerpt?: string | null;
  /**
   * Related exam (e.g., Engineering Entrance Exams)
   */
  exam: string | Exam;
  /**
   * Blog publication status
   */
  status?: ('draft' | 'published' | 'archived') | null;
  /**
   * Blog author name
   */
  author: string;
  /**
   * Featured image for the blog
   */
  featuredImage?: (string | null) | Media;
  /**
   * Estimated reading time in minutes
   */
  readTime?: number | null;
  /**
   * Number of views
   */
  views?: number | null;
  /**
   * SEO meta title (auto-generated from title if empty)
   */
  metaTitle?: string | null;
  /**
   * SEO meta description (auto-generated from excerpt if empty)
   */
  metaDescription?: string | null;
  /**
   * SEO keywords (comma-separated, auto-extracted from content)
   */
  keywords?: string | null;
  /**
   * Publication date (from SQL import)
   */
  publishedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * NEET and Medical entrance exam related blog posts
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Neetblogs".
 */
export interface Neetblog {
  id: string;
  /**
   * Original ID from the imported data
   */
  originalId?: number | null;
  /**
   * Blog title
   */
  title: string;
  /**
   * Blog content in text format
   */
  description: string;
  /**
   * Original HTML content as backup (from SQL import)
   */
  descriptionHtml?: string | null;
  /**
   * Short description for blog previews
   */
  excerpt?: string | null;
  /**
   * Related exam (e.g., Medical Entrance Exams)
   */
  exam: string | Exam;
  /**
   * Blog publication status
   */
  status?: ('draft' | 'published' | 'archived') | null;
  /**
   * Blog author name
   */
  author: string;
  /**
   * Featured image for the blog
   */
  featuredImage?: (string | null) | Media;
  /**
   * Estimated reading time in minutes
   */
  readTime?: number | null;
  /**
   * Number of views
   */
  views?: number | null;
  /**
   * SEO meta title (auto-generated from title if empty)
   */
  metaTitle?: string | null;
  /**
   * SEO meta description (auto-generated from excerpt if empty)
   */
  metaDescription?: string | null;
  /**
   * SEO keywords (comma-separated, auto-extracted from content)
   */
  keywords?: string | null;
  /**
   * Publication date (from SQL import)
   */
  publishedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * School exam and education related blog posts
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "schoolblogs".
 */
export interface Schoolblog {
  id: string;
  /**
   * Original ID from the imported data
   */
  originalId?: number | null;
  /**
   * Blog title
   */
  title: string;
  /**
   * Blog content in text format
   */
  description: string;
  /**
   * Original HTML content as backup (from SQL import)
   */
  descriptionHtml?: string | null;
  /**
   * Short description for blog previews
   */
  excerpt?: string | null;
  /**
   * Related exam (e.g., School Exam)
   */
  exam: string | Exam;
  /**
   * Blog publication status
   */
  status?: ('draft' | 'published' | 'archived') | null;
  /**
   * Blog author name
   */
  author: string;
  /**
   * Featured image for the blog
   */
  featuredImage?: (string | null) | Media;
  /**
   * Estimated reading time in minutes
   */
  readTime?: number | null;
  /**
   * Number of views
   */
  views?: number | null;
  /**
   * SEO meta title (auto-generated from title if empty)
   */
  metaTitle?: string | null;
  /**
   * SEO meta description (auto-generated from excerpt if empty)
   */
  metaDescription?: string | null;
  /**
   * SEO keywords (comma-separated, auto-extracted from content)
   */
  keywords?: string | null;
  /**
   * Publication date (from SQL import)
   */
  publishedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * SAT entrance exam related blog posts
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "satblogs".
 */
export interface Satblog {
  id: string;
  /**
   * Original ID from the imported data
   */
  originalId?: number | null;
  /**
   * Blog title
   */
  title: string;
  /**
   * URL-friendly slug for the blog
   */
  slug: string;
  /**
   * Blog content in text format
   */
  description: string;
  /**
   * Original HTML content as backup (from SQL import)
   */
  descriptionHtml?: string | null;
  /**
   * Short description for blog previews
   */
  excerpt?: string | null;
  /**
   * Related exam (e.g., SAT Entrance Exams)
   */
  exam: string | Exam;
  /**
   * Blog publication status
   */
  status?: ('draft' | 'published' | 'archived') | null;
  /**
   * Blog author ID (from SQL createdBy field)
   */
  author: string;
  /**
   * Last updated by user ID (from SQL updatedBy field)
   */
  updatedBy?: string | null;
  /**
   * Featured image URL (from SQL blogImage field)
   */
  featuredImage?: string | null;
  /**
   * Estimated reading time in minutes
   */
  readTime?: number | null;
  /**
   * Number of views
   */
  views?: number | null;
  /**
   * SEO meta title (auto-generated from title if empty)
   */
  metaTitle?: string | null;
  /**
   * SEO meta description (auto-generated from excerpt if empty)
   */
  metaDescription?: string | null;
  /**
   * SEO keywords (comma-separated, auto-extracted from content)
   */
  keywords?: string | null;
  /**
   * Publication date (from SQL import)
   */
  publishedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * International Baccalaureate (IB) related blog posts
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "idblogs".
 */
export interface Idblog {
  id: string;
  /**
   * Original ID from the imported data
   */
  originalId?: number | null;
  /**
   * Blog title
   */
  title: string;
  /**
   * URL-friendly slug for the blog (from SQL name field)
   */
  slug: string;
  /**
   * Blog content in text format
   */
  description: string;
  /**
   * Original HTML content as backup (from SQL import)
   */
  descriptionHtml?: string | null;
  /**
   * Short description for blog previews
   */
  excerpt?: string | null;
  /**
   * Related exam (e.g., International Entrance Exams)
   */
  exam: string | Exam;
  /**
   * Blog publication status
   */
  status?: ('draft' | 'published' | 'archived') | null;
  /**
   * Blog author ID (from SQL author field)
   */
  author: string;
  /**
   * Comment status (from SQL commentStatus field)
   */
  commentStatus?: ('open' | 'closed') | null;
  /**
   * Number of comments (from SQL commentCount field)
   */
  commentCount?: number | null;
  /**
   * Estimated reading time in minutes
   */
  readTime?: number | null;
  /**
   * Number of views
   */
  views?: number | null;
  /**
   * SEO meta title (auto-generated from title if empty)
   */
  metaTitle?: string | null;
  /**
   * SEO meta description (auto-generated from excerpt if empty)
   */
  metaDescription?: string | null;
  /**
   * SEO keywords (comma-separated, auto-extracted from content)
   */
  keywords?: string | null;
  /**
   * Publication date (from SQL createAt field)
   */
  publishedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Advanced Placement (AP) related blog posts
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "apblogs".
 */
export interface Apblog {
  id: string;
  /**
   * Original ID from the imported data
   */
  originalId?: number | null;
  /**
   * Blog title
   */
  title: string;
  /**
   * URL-friendly slug for the blog (from SQL name field)
   */
  slug: string;
  /**
   * Blog content in text format
   */
  description: string;
  /**
   * Original HTML content as backup (from SQL import)
   */
  descriptionHtml?: string | null;
  /**
   * Short description for blog previews
   */
  excerpt?: string | null;
  /**
   * Related exam (e.g., International Entrance Exams)
   */
  exam: string | Exam;
  /**
   * Blog publication status
   */
  status?: ('draft' | 'published' | 'archived') | null;
  /**
   * Blog author ID (from SQL author field)
   */
  author: string;
  /**
   * Comment status (from SQL commentStatus field)
   */
  commentStatus?: ('open' | 'closed') | null;
  /**
   * Number of comments (from SQL commentCount field)
   */
  commentCount?: number | null;
  /**
   * Estimated reading time in minutes
   */
  readTime?: number | null;
  /**
   * Number of views
   */
  views?: number | null;
  /**
   * SEO meta title (auto-generated from title if empty)
   */
  metaTitle?: string | null;
  /**
   * SEO meta description (auto-generated from excerpt if empty)
   */
  metaDescription?: string | null;
  /**
   * SEO keywords (comma-separated, auto-extracted from content)
   */
  keywords?: string | null;
  /**
   * Publication date (from SQL createdAt field)
   */
  publishedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'exams';
        value: string | Exam;
      } | null)
    | ({
        relationTo: 'exam_categories';
        value: string | ExamCategory;
      } | null)
    | ({
        relationTo: 'exam_infos';
        value: string | ExamInfo;
      } | null)
    | ({
        relationTo: 'exam_sub_infos';
        value: string | ExamSubInfo;
      } | null)
    | ({
        relationTo: 'download_folders';
        value: string | DownloadFolder;
      } | null)
    | ({
        relationTo: 'download_sub_folders';
        value: string | DownloadSubFolder;
      } | null)
    | ({
        relationTo: 'download_files';
        value: string | DownloadFile;
      } | null)
    | ({
        relationTo: 'courses';
        value: string | Course;
      } | null)
    | ({
        relationTo: 'Jeeblogs';
        value: string | Jeeblog;
      } | null)
    | ({
        relationTo: 'Neetblogs';
        value: string | Neetblog;
      } | null)
    | ({
        relationTo: 'schoolblogs';
        value: string | Schoolblog;
      } | null)
    | ({
        relationTo: 'satblogs';
        value: string | Satblog;
      } | null)
    | ({
        relationTo: 'idblogs';
        value: string | Idblog;
      } | null)
    | ({
        relationTo: 'apblogs';
        value: string | Apblog;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exams_select".
 */
export interface ExamsSelect<T extends boolean = true> {
  originalId?: T;
  examName?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exam_categories_select".
 */
export interface ExamCategoriesSelect<T extends boolean = true> {
  originalId?: T;
  exam?: T;
  categoryName?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exam_infos_select".
 */
export interface ExamInfosSelect<T extends boolean = true> {
  originalId?: T;
  category?: T;
  menuName?: T;
  description?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exam_sub_infos_select".
 */
export interface ExamSubInfosSelect<T extends boolean = true> {
  originalId?: T;
  examInfo?: T;
  subMenuName?: T;
  description?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "download_folders_select".
 */
export interface DownloadFoldersSelect<T extends boolean = true> {
  originalId?: T;
  category?: T;
  menuName?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "download_sub_folders_select".
 */
export interface DownloadSubFoldersSelect<T extends boolean = true> {
  originalId?: T;
  downloadFolder?: T;
  subMenuName?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "download_files_select".
 */
export interface DownloadFilesSelect<T extends boolean = true> {
  originalId?: T;
  downloadSubFolder?: T;
  fileName?: T;
  fileUrl?: T;
  fileType?: T;
  fileSize?: T;
  downloadCount?: T;
  createdAt?: T;
  updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses_select".
 */
export interface CoursesSelect<T extends boolean = true> {
  originalId?: T;
  category?: T;
  course_name?: T;
  course_short_description?: T;
  description?: T;
  price?: T;
  rating?: T;
  review?: T;
  start_date?: T;
  duration?: T;
  student_count?: T;
  course_type?: T;
  course_level?: T;
  other_details?: T;
  faculty_name?: T;
  faculty_image?: T;
  course_image?: T;
  course_video?: T;
  seo_title?: T;
  seo_description?: T;
  seo_keywords?: T;
  createdAt?: T;
  updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Jeeblogs_select".
 */
export interface JeeblogsSelect<T extends boolean = true> {
  originalId?: T;
  title?: T;
  description?: T;
  descriptionHtml?: T;
  excerpt?: T;
  exam?: T;
  status?: T;
  author?: T;
  featuredImage?: T;
  readTime?: T;
  views?: T;
  metaTitle?: T;
  metaDescription?: T;
  keywords?: T;
  publishedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Neetblogs_select".
 */
export interface NeetblogsSelect<T extends boolean = true> {
  originalId?: T;
  title?: T;
  description?: T;
  descriptionHtml?: T;
  excerpt?: T;
  exam?: T;
  status?: T;
  author?: T;
  featuredImage?: T;
  readTime?: T;
  views?: T;
  metaTitle?: T;
  metaDescription?: T;
  keywords?: T;
  publishedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "schoolblogs_select".
 */
export interface SchoolblogsSelect<T extends boolean = true> {
  originalId?: T;
  title?: T;
  description?: T;
  descriptionHtml?: T;
  excerpt?: T;
  exam?: T;
  status?: T;
  author?: T;
  featuredImage?: T;
  readTime?: T;
  views?: T;
  metaTitle?: T;
  metaDescription?: T;
  keywords?: T;
  publishedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "satblogs_select".
 */
export interface SatblogsSelect<T extends boolean = true> {
  originalId?: T;
  title?: T;
  slug?: T;
  description?: T;
  descriptionHtml?: T;
  excerpt?: T;
  exam?: T;
  status?: T;
  author?: T;
  updatedBy?: T;
  featuredImage?: T;
  readTime?: T;
  views?: T;
  metaTitle?: T;
  metaDescription?: T;
  keywords?: T;
  publishedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "idblogs_select".
 */
export interface IdblogsSelect<T extends boolean = true> {
  originalId?: T;
  title?: T;
  slug?: T;
  description?: T;
  descriptionHtml?: T;
  excerpt?: T;
  exam?: T;
  status?: T;
  author?: T;
  commentStatus?: T;
  commentCount?: T;
  readTime?: T;
  views?: T;
  metaTitle?: T;
  metaDescription?: T;
  keywords?: T;
  publishedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "apblogs_select".
 */
export interface ApblogsSelect<T extends boolean = true> {
  originalId?: T;
  title?: T;
  slug?: T;
  description?: T;
  descriptionHtml?: T;
  excerpt?: T;
  exam?: T;
  status?: T;
  author?: T;
  commentStatus?: T;
  commentCount?: T;
  readTime?: T;
  views?: T;
  metaTitle?: T;
  metaDescription?: T;
  keywords?: T;
  publishedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}